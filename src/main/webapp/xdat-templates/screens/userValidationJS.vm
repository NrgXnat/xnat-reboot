<!-- BEGIN xdat-templates/screens/userValidationJS.vm -->
##modified to prevent values greater than 255 characters.
<!-- <script type="text/javascript" src="$content.getURI("scripts/user/validateUsername.js")"></script> -->
<script type="text/javascript">
    console.log('userValidationJs.vm');

    $(document).ready(function(){
        $('#register-form').off('submit').on('submit',function(e){
            // e.preventDefault();
            
            var errorCount = 0, errorMessages = [];
            var _form = $(this);

            // define fields to validate
            var username        = document.getElementById('xdat:user.login');
            var password        = document.getElementById('xdat:user.primary_password');
            var confirm_password= document.getElementById('xdat:user.password_check');
            var firstname       = document.getElementById('xdat:user.firstname');
            var lastname        = document.getElementById('xdat:user.lastname');
            var email           = document.getElementById('xdat:user.email');

            // define specific tests
            var passwordComplexityMessage = '$!turbineUtils.escapeJS($siteConfig.passwordComplexityMessage)';
            if (passwordComplexityMessage.length === 0) passwordComplexityMessage = 'Password must comply with XNAT security policies.';

            // username
            var validateUsername = XNAT.validate(username).reset().chain();
            validateUsername.minLength(1).failure('Please enter a username');
            validateUsername.is('username').failure('Username can only contain letters and numbers. No spaces or special characters allowed.');

            // password
            var validateNewPass = XNAT.validate(password).reset().chain();
            validateNewPass.minLength(1).failure('New Password: field cannot be empty');
            validateNewPass.maxLength(255).failure('New Password: field cannot be longer than 255 characters');
            validateNewPass.pattern('$siteConfig.passwordComplexity'.trim()).failure('New Password: '+ passwordComplexityMessage);

            // confirm password
            var validateConfirmPass = XNAT.validate(confirm_password).reset().chain();
            validateConfirmPass.minLength(1).failure('Confirm Password: field cannot be empty');
            validateConfirmPass.maxLength(255).failure('Confirm Password: field cannot be longer than 255 characters');
            validateConfirmPass.pattern('$siteConfig.passwordComplexity'.trim()).failure('Confirm Password: ' + passwordComplexityMessage);
            validateConfirmPass.matches(password).failure('Password fields must match');

            // firstname
            var validateFirstname = XNAT.validate(firstname).reset().chain();
            validateFirstname.minLength(1).failure('Please enter your first name');
            validateFirstname.is('nameSafe').failure('Name fields can only contain unaccented letters and spaces');

            // lastname
            var validateLastname = XNAT.validate(lastname).reset().chain();
            validateLastname.minLength(1).failure('Please enter your last name');
            validateLastname.is('nameSafe').failure('Name fields can only contain unaccented letters and spaces');

            // email
            var validateEmail = XNAT.validate(email).reset().chain();
            validateEmail.minLength(1).failure('Please enter your email address');
            validateEmail.is('email').failure('Please enter a valid email address');

            // count errors
            [validateUsername,validateNewPass,validateConfirmPass,validateFirstname,validateLastname,validateEmail].forEach(function(item){
                item.check(); // summary true/false test for pass or fail. Sets classes on inputs.
                errorCount += item.messages.length; // count the error messages returned by each validator
                item.messages.forEach(function(msg){ errorMessages.push(msg) });
            });

            // display errors, if found
            if (errorCount) {
                xmodal.message({ title: 'Form Validation Error', content: '<p>Errors found:</p><ul><li>' + errorMessages.join('</li><li>') + '</li></ul>', height: 300 });
                return false;
            } else {
                return true;
            }
        });

        $('#register-form').find('input').on('focus',function(){ $(this).removeClass('invalid'); });
    });

</script>
<!-- END xdat-templates/screens/userValidationJS.vm -->
